name: CI CD

on:
  push:
    branches: [ feature/deploy-package ]
    # tags: ['v*']
  # pull_request:
  #   branches: [ master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-20.04, windows-2019]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y curl libomp-dev
    
    - name: Cache venv on Windows
      id: cached-poetry-dependencies-windows
      uses: actions/cache@v2
      if: matrix.os == 'windows-2019'
      with:
        path: |
          ~/AppData/Local/pypoetry/Cache
          .venv
        key: poetry-${{ runner.os }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Cache venv on Ubuntu
      id: cached-poetry-dependencies-linux
      uses: actions/cache@v2
      if: matrix.os != 'windows-2019'
      with:
        path: |
          ~/.cache/pypoetry
          .venv
        key: poetry-${{ runner.os }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Install dependencies
      if: (matrix.os == 'windows-2019' && steps.cached-poetry-dependencies-windows.outputs.cache-hit != 'true') || (matrix.os != 'windows-2019' && steps.cached-poetry-dependencies-linux.outputs.cache-hit != 'true')
      run: |
        poetry install --no-interaction --no-root
    
    - name: Build and install package
      run: |
        poetry run python ./setup.py bdist_wheel
        poetry run pip install .
        rm -r ./probreg

    - name: Test
      run: poetry run python -m unittest discover

    - name: Upload to remote repo
      env:
        TWINE_REPOSITORY_URL : ${{ secrets.PYPI_CUSTOM_URL }}
        TWINE_USERNAME : ${{ secrets.PYPI_USER }}
        TWINE_PASSWORD : ${{ secrets.PYPI_PASS }}
      run: |
        poetry run twine upload --non-interactive --verbose ./dist/*
